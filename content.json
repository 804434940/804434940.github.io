{"pages":[{"title":"文章分类","text":"","link":"/categories/index.html"},{"title":"标签","text":"","link":"/tags/index.html"}],"posts":[{"title":"jib打包项目到阿里镜像","text":"一、在pom文件中引入jib插件1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt; &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.7.0&lt;/version&gt; &lt;configuration&gt; &lt;!--拉取的镜像的配置，默认为gcr.io/distroless/java--&gt; &lt;from&gt; &lt;image&gt;基础镜像地址&lt;/image&gt; &lt;auth&gt; &lt;username&gt;阿里云用户名&lt;/username&gt; &lt;password&gt;阿里云密码&lt;/password&gt; &lt;/auth&gt; &lt;/from&gt; &lt;to&gt; &lt;image&gt;基础镜像地址&lt;/image&gt; &lt;auth&gt; &lt;username&gt;阿里云用户名&lt;/username&gt; &lt;password&gt;阿里云密码&lt;/password&gt; &lt;/auth&gt; &lt;tags&gt; &lt;tag&gt;版本号&lt;/tag&gt; &lt;/tags&gt; &lt;/to&gt; &lt;allowInsecureRegistries&gt;true&lt;/allowInsecureRegistries&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;build&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 版本号这里一开始指定的自定义版本，但是使用jib:build时报错，说找不到latest版本，不知道是不是默认拉取latest，但是网上其他博主好像并没有这个情况，这里就只好将tag设为latest了 二、github创建仓库添加Dockerfile文件 三、阿里云创建镜像仓库3.1 创建仓库点击下一步，根据提示选择Dockerfile所在仓库 进入新创建的仓库，点击添加规则这里版本起名latest，原因上面解释了，有知道的伙伴还请告知 感谢~ 点击构建，等待一会，下方日志中会显示构建的镜像和状态 最后返回基本信息，复制公网地址，放在from和to的image中，一定要填写username和password最后执行 jib:build即可成功 成功! 最后在docker中拉取就可以了 1docker run -d --name testjib-p 8081:8081 刚刚复制的公网地址:latest(对应的镜像版本号)","link":"/2020/01/06/jib%E6%89%93%E5%8C%85Springboot%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F/"},{"title":"docker安装ES","text":"123456789101112131415161718192021222324docker pull elasticsearch:6.4.0 //再低就是5.x了1.vim /etc/security/limits.d/90-nproc.conf 添加：soft nproc 40962. vim /etc/sysctl.conf 添加vm.max_map_count=655360 执行sysctl -p刷新配置//根据自己的内存大小适当调整，太大会启动失败3.docker run -e ES_JAVA_OPTS=\"-Xms512m -Xmx512m\" -d -p 9200:9200 -p 9300:9300 --name=myES 容器id4.docker exec -it 容器名 /bin/bash 进入容器命令行5.vim config/elasticsearch.yml 地址改为0.0.0.0可能会vim不可用 执行 yum update yum install -y vim6.安装ik分词器先上传到宿主机，再使用以下命令copy到容器中docker cp 宿主机ik分词器地址 容器名:/usr/share/elasticsearch/plugins/ik","link":"/2020/01/06/docker%E5%AE%89%E8%A3%85ES/"},{"title":"mavon-editor+springboot+fdfs上传文件","text":"一、安装mavon直接npm install下就可以了，然后在main.js引入：12import mavonEditor from 'mavon-editor'Vue.use(mavonEditor) 二、页面使用1234567891011&lt;mavon-editor v-show=\"!articleModal\" id=\"editor\" v-model=\"value\" fontSize=\"16px\" ref=\"md\" @imgAdd=\"$imgAdd\" @imgDel=\"$imgDel\" @change=\"handleChange\" @fullScreen=\"handleFullScreen\" /&gt; 这里只需要关注@imgAdd，为添加图片的事件 三、上传文件这里使用的是批量上传，所以每触发一次@imgAdd就向文件集合添加一次 1234567/** * 添加文件到文件集合中 */ $imgAdd(pos, $file) { // 缓存图片信息 this.img_file[pos] = $file; }, data中定义如下： 1img_file: {}, //文件集合 上传文件方法： 123456789101112131415161718192021222324/** * 上传文件 */ uploadimg($e) { var formdata = new FormData(); for (var _img in this.img_file) { formdata.append(\"files\", this.img_file[_img]); } uploadApi.uploadFileList(formdata).then(res =&gt; { console.log(res); const resData = res.data.data; /** * 例如：返回数据为 res = [[pos, url], [pos, url]...] * pos 为原图片标志（0） * url 为上传后图片的url地址 */ // 第二步.将返回的url替换到文本原位置![...](0) -&gt; ![...](url) for (var i = 0; i &lt; resData.length; i++) { this.$refs.md.$img2Url(i + 1, resData[i]); } }); } 然后在需要上传的时候调用一下这个方法就可以啦 四、后台进行上传4.1Controller123456789101112131415/** * 文章多文件上传 * @param files * @return 返回图片地址 */ @PostMapping(value = \"/files\",produces = MediaType.APPLICATION_JSON_UTF8_VALUE) public Result uploadMultiFiles(@RequestParam(\"files\") MultipartFile[] files){ try { List&lt;String&gt; resultList = uploadService.uploadMultiFiles(files); return new Result(true,StatusCode.OK,\"上传成功\",resultList); }catch (Exception e){ return new Result(false,StatusCode.ERROR,\"啊哦~图片上传出现了点小错误，请稍后再上传\"); } } 4.2、Service123456789101112131415161718192021222324252627282930313233343536/** * 批量上传 * @param files */ public List&lt;String&gt; uploadMultiFiles(MultipartFile[] files) { List&lt;String&gt; resultList=new ArrayList&lt;&gt;(); for (MultipartFile file : files) { try { //校验文件内容 BufferedImage image = ImageIO.read(file.getInputStream()); if (image == null) { throw new MyException(ExceptionEnum.INVALID_FILE_TYPE); } //获取拓展名 String extension = StringUtils.substringAfterLast(file.getOriginalFilename(), \".\"); //上传到FastDFS StorePath storePath = storageClient.uploadFile(file.getInputStream(), file.getSize(), extension, null); //不加http://前端无法显示 resultList.add(\"http://\"+uploadProperties.getBaseUrl() + storePath.getFullPath()); //返回路径 } catch (IOException e) { //上传失败 LOGGER.error(\"[文件上传]文件\"+file.getOriginalFilename()+\"上传失败!\", e); throw new MyException(ExceptionEnum.UPLOAD_FILE_ERROR); } } return resultList; } Fdfs的相关配置在这篇文章写啦(不好意思比较懒)：https://blog.csdn.net/weixin_43696529/article/details/102727220","link":"/2020/01/06/mavon-editor+springboot+fdfs%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"},{"title":"docker安装ES","text":"cat说明：用来显示文本内容(小文件)，对于大文件推荐使用more命令 格式： cat +选项+指定文件 选项： 123&gt; -n 或 --number：显示行号；&gt; -b 或 --number-nonblank：编号时忽略空白行&gt; -A：显示不可打印字符，行尾显示“$”； 如： 1234567echo xxx&gt;test 若test不存在，则自动创建test并写入xxx，否则直接写入cat 123.txt 屏幕显示123.txt内容cat 文本1 文本2 ... 显示多个文本内容cat 文本1 文本2 &gt; 文本3 将文本1和2的内容合并到文本3中cat 文本1 &gt; 文本2 将文本1内容拷贝到文本2cat /dev/null &gt; 文本1 清空文本1的内容cat &gt;test1.txt &lt;&lt;stop 向test1.txt写入内容，输入stop结束 注意：每次合并时，文本3的内容会被重新覆盖 more全屏幕显示文本文件内容 选项：12345-数字：每屏显示指定行-c：不进行滚屏操作。每次刷新这个屏幕；-s：将多个空行压缩成一行显示；-u：禁止下划线；+数字：从指定数字的行开始显示。 查看时可用命令： Space键：显示文本的下一屏内容。 Enter键：每次刷新一行 H键：显示相关的帮助信息 B键：查看上一屏 q键：退出 ​​ cd1.cd : 进入目录 2.cd ~: 进入用户目录 3.cd - : 进入历史上一级目录，即进此目录之前的那个目录 4.cd .. ：返回上级目录 cd ../../ 有几个.../就返回上几级目录 ls 显示目标列表 选项 -a 显示所有文件（在linux中以.开头的文件为隐藏文件） -l 显示文本的详情包括(权限、拥有者、文件大小、最后修改时间等) -r 将文件反序显示(默认按照英文字母顺序) -t 按照创建时间列出 -A 同 -a ，但不列出 &quot;.&quot; (目前目录) 及 &quot;..&quot; (父目录) -F 在文件名称后加一个符号： *：代表可执行档 /： 代表目录 -R 有文件的目录，也会将其子文件列出 ​ -R举例： -F举例：test2是一个目录。所以在后边显示了一个/ pwd 显示当前工作目录（绝对路径） head 显示指定文件前N行 选项： -n：指定显示前n行 -v：显示文件名的头信息； -q：不显示文件名的头信息。 tail 显示指定文件的末尾N行，默认10行 选项： -c,–bytes=：显示文件尾部的N（N为整数）个字节内 -f&lt;name/descriptor&gt;：动态显示文件尾部内容，如某个动态更新的日志，可以使用-f查看最新的内容 -n：输出文件的尾部N（N位数字）行内容。 –pid=&lt;进程号&gt;：与“-f”选项连用，当指定的进程号的进程终止时退出该命令-q,–quiet,–silent：当有多个文件参数时，不输出各个文件名； -s&lt;秒数&gt;,–sleep-interal=&lt;秒数&gt;：与“-f”连用，指定文件变化时间隔(s) -v,–verbose：当有多个文件参数时，总是输出各个文件名； –help：帮助信息 –version：指令版本 举例： 12345tail test 不指定行数默认显示文件test的最后10行tail -n +10 test 从第10行到最后tail -c 10 test 显示该文件的最后10个字符tail -25 nginx.log 显示最后的 25 行tail -f nginx.log 动态刷新该文件最后的内容 chmod修改文件或目录的权限 权限范围：u: –&gt; User ，当前文件/目录的拥有者g: –&gt; Group ， 所属组o: –&gt; Other ， 除User和所属群组之外的所有用户a: –&gt; All ， 所有用户r: –&gt; 读权限，数字 4w:–&gt; 写权限，数字 2x: 执行/切换权限，数字 1- 无权限，数字 0 语法： chmod [options][参数] 选项： 1234567891011121314151617+ 添加某些权限- 取消某些权限= 指定文件权限r 读权限w 写权限x 可执行权限- 无权限X 给可执行文件设置可执行权限t 只有目录或文件的所有者才可以删除目录下的文件-c ,--changes 效果类似“-v”参数，但仅回报更改的部分，如果文件权限已经改变，显示其操作信息；-f , --quiet, --silent 操作过程中不显示任何错误信息；-R, --recursive 以递归更改其本身及子目录-v, --verbose 显示详情信息--reference=&lt;参考文件或目录&gt; 指定参考文件，非自定义权限--help 显示帮助信息--version 显示版本信息 权限结构： 1-rwxr--r-- 1 user staff 651 Nov 11 11:02 .ignore 第一个 -: 代表是普通文件，若是 d，则代表目录 第一组rwx：即上边的rw-,表示u属组 第二组rwx: 即上边中间的r–，表示g属组 第三组rwx: 即上边最后的r–， 表示其他人的权限 r:读 4 w：写 2 x：执行 1 举例: 1234567chmod u+w,g+r test1 为test1设置当前用户可写，组可读的权限chmod u=rwx,g=rw,o=r test1 当前用户可读写执行，组可读写，其他用户只能读chmod 764 test1 当前用户读写执行，组读写，其他只可读chmod a+r test1 所有用户都只可读test1chmod ugo-r test1 所有用户减掉可读权限 chmod -R 755 /usr/local/test/ 递归修改test目录下的子文件的权限为 755,7即4+2+1，5即4+1chown john:student test1 把test1给John，添加到student组 chown 改变文件或目录的拥有者或所属群组 可以给某个用户授权，使该用户变成指定文件的所有者或者改变文件所属的组。 语法： chown [options][参数] 选项： 12345-c，--changes：显示修改的部分；-f ：不显示错误信息；-h：只对符号连接的文件作修改，而不更改其他任何相关文件；-R：递归处理指定目录下的所有文件及子目录-v：显示指令执行过程信息 123chown -R wml:mygroup /usr/local/test1 将/usr/local/test下面的所有文件以及子目录的文件拥有者改为wml,群组为mygroup - ## cmp 比较两个二进制文件是否有差异，若无差异则不显示任何信息，若有差异则显示第一个不同的地方的字符和列数 **语法：** cmp [options][参数] **选项：** 12-l：对于每处不同，显示十进制的字节数和八进制的不同字节。；-s，--quit，--silent：不显示错误信息； **举例:** 123.txt ： 我是123 222 222.txt: 我是222 222 1cmp 123.txt 222.txt --结果--&gt;123.txt 222.txt differ: byte 1, line 1 - ## diff 比较两个文件的不同，该命令是采取逐行比较的方式， **选项：** 12345678910111213-&lt;行数&gt;：指定显示多少行的文本-a，--text：将文件当做文本文件处理-b：忽略空格字符造成的不同；-B，--ignore-blank-lines：忽略空白行；-c：显示两个文件的全部内容，并标出不同之处-H，--speed-large-files：加速大文件检索-i，--ignore-case：忽略大小写不同-l或——paginate：分页-q或--brief：仅显示有无差异，不显示详细的信息 有不同的结果:Files 123.txt and 222.txt differ-r，--recursive：比较子目录中的文件-T：每行对齐输出-y：并列打印 举例： ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191028231857879.png) - ## file 检测目标文件类型 **选项：** 1234-b：不显示文件名称L-L：直接显示符号连接所指向的文件类别；-v：显示版本信息；-z：尝试去解读压缩文件的内容。 **举例：** 123[admin@ test]$ file 123.txt 222.txt123.txt: UTF-8 Unicode text222.txt: UTF-8 Unicode text find查询指定目录下的文件选项： 123456789101112131415161718192021-depth：从指定目录的最深层的子目录开始查找-maxdepth&lt;目录深度&gt;：最大目录深度-mindepth&lt;目录深度&gt;：最小目录层级；-empty：查找大小为0 的文件或空目录-exec&lt;要执行的指令&gt;：若find指令返回True，就执行目标指令(如找到空的就执行rm删除目标文件)-fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录；-ls：将文件或目录名称列出到标准输出(权限信息，所属用户、组，时间信息等)-name&lt;inputname&gt;，-iname：查询名称符合inputname的文件，-iname忽略大小写-anewer test : 比文件 file 更晚被读取过的文件-path&lt;testPath&gt;，-ipath&lt;testPath&gt;：路径符合testPath的文件,-ipath 忽略大小写-perm&lt;权限值&gt;：查找符合指定的权限数值的文件-print：将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；-printf&lt;输出格式&gt;：自定义格式输出-size&lt;文件大小&gt;：查找符合指定大小的文件-type&lt;文件类型&gt;：指定的文件类型的文件-user&lt;拥有者名称&gt;：指定用户拥有的文件 举例： 1.find. 列出当前目录的所有文件及其子文件 123456789 find . 结果：../333.txt./222.txt./test2./test2/123.txt./123.txt./empty.txt 2.find /usr/test -name “*.txt”：查找test目录下后缀名为txt的文件 1234567find /usr/test -name \"*.txt\"结果：/usr/test/333.txt/usr/test/222.txt/usr/test/test2/123.txt/usr/test/123.txt/usr/test/empty.txt 3.find /usr/test ! -name “*.txt”：查找test目录下后缀名不是txt的文件 4.根据文件类型查找 -type: 1find . -type 参数 类型参数： f ：普通文件 l ：符号连接 d ：目录 c ：字符设备 b ：块设备 s ：套接字 p ：Fifo 5.查找小于3k的文件 1find . -size -3k 结果： ./333.txt ./222.txt ./test2/123.txt ./123.txt ./empty.txt 6.查找大小为0的文件 12[root@ test] find -empty./empty.txt 7.查找指定权限的文件 首先给123.txt赋予77权限： 1chmod 777 123.txt 查看下结果： 12345-rwxrwxrwx 1 777 root 21 Oct 28 23:08 123.txt-rw-r--r-- 1 root root 15 Oct 28 22:57 222.txt-rw-r--r-- 1 root root 23 Oct 27 22:46 333.txt-rw-r--r-- 1 root root 0 Oct 29 15:20 empty.txtdrwxr-xr-x 2 root root 4096 Oct 27 19:52 test2 只有123.txt的权限为777, 执行查找： 1find -perm 777 结果： 1./123.txt ​ 持续更新………","link":"/2020/01/06/Linux%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86-------------%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3(%E4%B8%80)/"}],"tags":[{"name":"jib","slug":"jib","link":"/tags/jib/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"elasticsearch","slug":"elasticsearch","link":"/tags/elasticsearch/"},{"name":"文件上传","slug":"文件上传","link":"/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"fdfs","slug":"fdfs","link":"/tags/fdfs/"},{"name":"linux","slug":"linux","link":"/tags/linux/"}],"categories":[{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"springboot","slug":"springboot","link":"/categories/springboot/"},{"name":"linux","slug":"linux","link":"/categories/linux/"}]}