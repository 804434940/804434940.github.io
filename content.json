{"pages":[{"title":"文章分类","text":"","link":"/categories/index.html"},{"title":"标签","text":"","link":"/tags/index.html"}],"posts":[{"title":"jib打包项目到阿里镜像","text":"一、在pom文件中引入jib插件1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;com.google.cloud.tools&lt;/groupId&gt; &lt;artifactId&gt;jib-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.7.0&lt;/version&gt; &lt;configuration&gt; &lt;!--拉取的镜像的配置，默认为gcr.io/distroless/java--&gt; &lt;from&gt; &lt;image&gt;基础镜像地址&lt;/image&gt; &lt;auth&gt; &lt;username&gt;阿里云用户名&lt;/username&gt; &lt;password&gt;阿里云密码&lt;/password&gt; &lt;/auth&gt; &lt;/from&gt; &lt;to&gt; &lt;image&gt;基础镜像地址&lt;/image&gt; &lt;auth&gt; &lt;username&gt;阿里云用户名&lt;/username&gt; &lt;password&gt;阿里云密码&lt;/password&gt; &lt;/auth&gt; &lt;tags&gt; &lt;tag&gt;版本号&lt;/tag&gt; &lt;/tags&gt; &lt;/to&gt; &lt;allowInsecureRegistries&gt;true&lt;/allowInsecureRegistries&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;build&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 版本号这里一开始指定的自定义版本，但是使用jib:build时报错，说找不到latest版本，不知道是不是默认拉取latest，但是网上其他博主好像并没有这个情况，这里就只好将tag设为latest了 二、github创建仓库添加Dockerfile文件 三、阿里云创建镜像仓库3.1 创建仓库点击下一步，根据提示选择Dockerfile所在仓库 进入新创建的仓库，点击添加规则这里版本起名latest，原因上面解释了，有知道的伙伴还请告知 感谢~ 点击构建，等待一会，下方日志中会显示构建的镜像和状态 最后返回基本信息，复制公网地址，放在from和to的image中，一定要填写username和password最后执行 jib:build即可成功 成功! 最后在docker中拉取就可以了 1docker run -d --name testjib-p 8081:8081 刚刚复制的公网地址:latest(对应的镜像版本号)","link":"/2020/01/06/jib%E6%89%93%E5%8C%85Springboot%E9%A1%B9%E7%9B%AE%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F/"},{"title":"docker安装ES","text":"123456789101112131415161718192021222324docker pull elasticsearch:6.4.0 //再低就是5.x了1.vim /etc/security/limits.d/90-nproc.conf 添加：soft nproc 40962. vim /etc/sysctl.conf 添加vm.max_map_count=655360 执行sysctl -p刷新配置//根据自己的内存大小适当调整，太大会启动失败3.docker run -e ES_JAVA_OPTS=\"-Xms512m -Xmx512m\" -d -p 9200:9200 -p 9300:9300 --name=myES 容器id4.docker exec -it 容器名 /bin/bash 进入容器命令行5.vim config/elasticsearch.yml 地址改为0.0.0.0可能会vim不可用 执行 yum update yum install -y vim6.安装ik分词器先上传到宿主机，再使用以下命令copy到容器中docker cp 宿主机ik分词器地址 容器名:/usr/share/elasticsearch/plugins/ik","link":"/2020/01/06/docker%E5%AE%89%E8%A3%85ES/"},{"title":"mavon-editor+springboot+fdfs上传文件","text":"一、安装mavon直接npm install下就可以了，然后在main.js引入：12import mavonEditor from 'mavon-editor'Vue.use(mavonEditor) 二、页面使用1234567891011&lt;mavon-editor v-show=\"!articleModal\" id=\"editor\" v-model=\"value\" fontSize=\"16px\" ref=\"md\" @imgAdd=\"$imgAdd\" @imgDel=\"$imgDel\" @change=\"handleChange\" @fullScreen=\"handleFullScreen\" /&gt; 这里只需要关注@imgAdd，为添加图片的事件 三、上传文件这里使用的是批量上传，所以每触发一次@imgAdd就向文件集合添加一次 1234567/** * 添加文件到文件集合中 */ $imgAdd(pos, $file) { // 缓存图片信息 this.img_file[pos] = $file; }, data中定义如下： 1img_file: {}, //文件集合 上传文件方法： 123456789101112131415161718192021222324/** * 上传文件 */ uploadimg($e) { var formdata = new FormData(); for (var _img in this.img_file) { formdata.append(\"files\", this.img_file[_img]); } uploadApi.uploadFileList(formdata).then(res =&gt; { console.log(res); const resData = res.data.data; /** * 例如：返回数据为 res = [[pos, url], [pos, url]...] * pos 为原图片标志（0） * url 为上传后图片的url地址 */ // 第二步.将返回的url替换到文本原位置![...](0) -&gt; ![...](url) for (var i = 0; i &lt; resData.length; i++) { this.$refs.md.$img2Url(i + 1, resData[i]); } }); } 然后在需要上传的时候调用一下这个方法就可以啦 四、后台进行上传4.1Controller123456789101112131415/** * 文章多文件上传 * @param files * @return 返回图片地址 */ @PostMapping(value = \"/files\",produces = MediaType.APPLICATION_JSON_UTF8_VALUE) public Result uploadMultiFiles(@RequestParam(\"files\") MultipartFile[] files){ try { List&lt;String&gt; resultList = uploadService.uploadMultiFiles(files); return new Result(true,StatusCode.OK,\"上传成功\",resultList); }catch (Exception e){ return new Result(false,StatusCode.ERROR,\"啊哦~图片上传出现了点小错误，请稍后再上传\"); } } 4.2、Service123456789101112131415161718192021222324252627282930313233343536/** * 批量上传 * @param files */ public List&lt;String&gt; uploadMultiFiles(MultipartFile[] files) { List&lt;String&gt; resultList=new ArrayList&lt;&gt;(); for (MultipartFile file : files) { try { //校验文件内容 BufferedImage image = ImageIO.read(file.getInputStream()); if (image == null) { throw new MyException(ExceptionEnum.INVALID_FILE_TYPE); } //获取拓展名 String extension = StringUtils.substringAfterLast(file.getOriginalFilename(), \".\"); //上传到FastDFS StorePath storePath = storageClient.uploadFile(file.getInputStream(), file.getSize(), extension, null); //不加http://前端无法显示 resultList.add(\"http://\"+uploadProperties.getBaseUrl() + storePath.getFullPath()); //返回路径 } catch (IOException e) { //上传失败 LOGGER.error(\"[文件上传]文件\"+file.getOriginalFilename()+\"上传失败!\", e); throw new MyException(ExceptionEnum.UPLOAD_FILE_ERROR); } } return resultList; } Fdfs的相关配置在这篇文章写啦(不好意思比较懒)：https://blog.csdn.net/weixin_43696529/article/details/102727220","link":"/2020/01/06/mavon-editor+springboot+fdfs%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"}],"tags":[{"name":"jib","slug":"jib","link":"/tags/jib/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"elasticsearch","slug":"elasticsearch","link":"/tags/elasticsearch/"},{"name":"文件上传","slug":"文件上传","link":"/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"fdfs","slug":"fdfs","link":"/tags/fdfs/"}],"categories":[{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"springboot","slug":"springboot","link":"/categories/springboot/"}]}